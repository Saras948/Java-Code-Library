Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  [1,1,1,1,0],
  [1,1,0,1,0],
  [1,1,0,0,0],
  [0,0,0,0,0]
]
Output: 1

Solution : 
Approach : While iterating the matrix if we find 1 i.e land, then we find  connecting land with it and when we found 0 i.e water for that land we stop and search for
          next island and cnt++ and we will use visited array for visting the island because once we found one island then we should not visit that island again.For that
          I solving this problem using DFS(Depth First Search) Algorithm.


public class Main
{
	public static void main(String[] args) {
	    int A[][] = {{0,1,1,0},{0,1,0,1},{1,0,1,1},{1,1,0,1}};
	    int cnt = 0;
	    for(int i=0;i<A.length;i++)
	    {
	        for(int j=0;j<A[0].length;j++)
	        {
	            if(A[i][j]!=2 && A[i][j]!=0)
	            {
	                cnt++;
	                dfs(i,j,A);
	            }
	        }
	    }
	    System.out.println("Hello World "+cnt);
	}
	public static void dfs(int x,int y,int mat[][])
	{
	    mat[x][y] = 2;
	    int dx[] = {-1,0,1,0};
	    int dy[] = {0,1,0,-1};
	    for(int k=0;k<4;k++)
	    {
	        int t_x = x + dx[k];
	        int t_y = y + dy[k];
	        if(t_x>=0 && t_x<mat.length && t_y>=0 && t_y<mat[0].length && mat[t_x][t_y]==1)
	        {
	            dfs(t_x,t_y,mat);
	        }
	    }
	}
}
